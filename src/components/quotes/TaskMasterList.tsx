'use client';

import React from 'react';
import {
  Button,
  Table,
  TableHeader,
  TableColumn,
  TableBody,
  TableRow,
  TableCell,
} from '@heroui/react';
import { PlusCircle, Edit, Trash, ClipboardList } from 'lucide-react';
import { useTranslation } from '~/hooks/useTranslation';
import type { QuoteFormValues, TaskFormValues } from './QuoteForm';
import type { UseFormWatch } from 'react-hook-form';

// Extend TaskFormValues to include the 'id' provided by useFieldArray
export interface TaskItem extends TaskFormValues {
  id: string; // This ID is generated by useFieldArray, not the DB ID initially
}

interface TaskMasterListProps {
  tasks: TaskItem[];
  onSelectTask: (index: number) => void;
  onAddTask: () => void;
  onDeleteTask: (index: number) => void;
  watch?: UseFormWatch<QuoteFormValues>;
}

export const TaskMasterList: React.FC<TaskMasterListProps> = ({
  tasks,
  onSelectTask,
  onAddTask,
  onDeleteTask,
  watch,
}) => {
  const { t, formatCurrency } = useTranslation();

  // Calculate task totals for display
  const getTaskTotal = (task: TaskItem): number => {
    const laborCost =
      typeof task.price === 'number' ? task.price : parseFloat(String(task.price) || '0');

    let materialsCost = 0;
    if (task.materialType === 'LUMPSUM' && task.estimatedMaterialsCostLumpSum) {
      materialsCost =
        typeof task.estimatedMaterialsCostLumpSum === 'number'
          ? task.estimatedMaterialsCostLumpSum
          : parseFloat(String(task.estimatedMaterialsCostLumpSum) || '0');
    } else if (task.materialType === 'ITEMIZED' && task.materials && task.materials.length > 0) {
      materialsCost = task.materials.reduce((sum, material) => {
        const quantity =
          typeof material.quantity === 'number'
            ? material.quantity
            : parseFloat(String(material.quantity) || '0');
        const unitPrice =
          typeof material.unitPrice === 'number'
            ? material.unitPrice
            : parseFloat(String(material.unitPrice) || '0');
        return sum + quantity * unitPrice;
      }, 0);
    }

    return laborCost + materialsCost;
  };

  return (
    <div className="space-y-4">
      {/* Add New Task Button - Always visible at the top */}
      <div className="flex justify-end">
        <Button color="primary" startContent={<PlusCircle size={18} />} onPress={onAddTask}>
          Add Task
        </Button>
      </div>

      {tasks.length === 0 ? (
        <div className="flex flex-col items-center justify-center rounded-lg border border-dashed border-gray-300 p-8 text-center dark:border-gray-600">
          <ClipboardList size={40} className="mb-2 text-gray-400" />
          <p className="mb-1 text-lg font-medium">No tasks added yet</p>
          <p className="mb-4 text-sm text-gray-500 dark:text-gray-400">
            Add tasks to create a detailed quote
          </p>
          <Button color="primary" startContent={<PlusCircle size={16} />} onPress={onAddTask}>
            Add Task
          </Button>
        </div>
      ) : (
        <Table
          aria-label="Tasks table"
          removeWrapper
          classNames={{
            base: 'border border-gray-200 rounded-lg',
          }}
        >
          <TableHeader>
            <TableColumn>DESCRIPTION</TableColumn>
            <TableColumn>LABOR COST</TableColumn>
            <TableColumn>MATERIALS</TableColumn>
            <TableColumn>TOTAL</TableColumn>
            <TableColumn width={120}>ACTIONS</TableColumn>
          </TableHeader>
          <TableBody>
            {tasks.map((task, index) => {
              const taskTotal = getTaskTotal(task);
              const materialCount =
                task.materialType === 'ITEMIZED' ? task.materials?.length || 0 : null;
              const materialInfo =
                task.materialType === 'LUMPSUM' ? 'Lump sum' : `${materialCount} item(s)`;

              return (
                <TableRow key={task.id} className="hover:bg-gray-50 dark:hover:bg-gray-800/50">
                  <TableCell className="font-medium">
                    {task.description || `Untitled Task ${index + 1}`}
                  </TableCell>
                  <TableCell>{formatCurrency(task.price || 0)}</TableCell>
                  <TableCell>{materialInfo}</TableCell>
                  <TableCell className="font-medium">{formatCurrency(taskTotal)}</TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        variant="flat"
                        color="primary"
                        onPress={() => onSelectTask(index)}
                        isIconOnly
                      >
                        <Edit size={16} />
                      </Button>
                      <Button
                        size="sm"
                        color="danger"
                        variant="light"
                        onPress={() => onDeleteTask(index)}
                        isIconOnly
                      >
                        <Trash size={16} />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              );
            })}
          </TableBody>
        </Table>
      )}
    </div>
  );
};
