'use client';

import React from 'react';
import { Button, Listbox, ListboxItem } from '@heroui/react';
import { PlusCircle, Edit, Trash } from 'lucide-react';
import { useTranslation } from '~/hooks/useTranslation';
import type { QuoteFormValues, TaskFormValues } from './QuoteForm';

// Extend TaskFormValues to include the 'id' provided by useFieldArray
export interface TaskItem extends TaskFormValues {
  id: string; // This ID is generated by useFieldArray, not the DB ID initially
}

interface TaskMasterListProps {
  tasks: TaskItem[];
  onSelectTask: (index: number) => void;
  onAddTask: () => void;
  onDeleteTask: (index: number) => void;
  // onMoveTask: (from: number, to: number) => void; // TODO: Implement reordering later
}

export const TaskMasterList: React.FC<TaskMasterListProps> = ({
  tasks,
  onSelectTask,
  onAddTask,
  onDeleteTask,
  // onMoveTask
}) => {
  const { t, formatCurrency } = useTranslation();

  return (
    <div className="space-y-4">
      {tasks.length === 0 && (
        <p className="py-4 text-center text-gray-500 dark:text-gray-400">
          {/* {t('quotes.noTasksAddedEditable')} */} {/* Add this translation key */}
          No tasks added yet. Click below to add the first task. {/* Placeholder */}
        </p>
      )}

      {tasks.length > 0 && (
        <Listbox
          aria-label="Task List"
          variant="flat"
          className="rounded-md border p-0 dark:border-gray-700"
        >
          {tasks.map((task, index) => (
            <ListboxItem
              key={task.id} // Use the field array item ID for the key
              textValue={task.description || `Task ${index + 1}`}
              className="border-b last:border-b-0 data-[hover=true]:bg-gray-100 dark:border-gray-700 dark:data-[hover=true]:bg-gray-700/50"
            >
              <div className="flex w-full items-center justify-between px-3 py-2">
                {/* Task Description and Price */}
                <div className="mr-4 min-w-0 flex-1 cursor-pointer" onClick={() => onSelectTask(index)}>
                  <p className="truncate text-sm font-medium dark:text-gray-200">
                    {/* {task.description || t('common.untitledTask')} */} {/* Add common.untitledTask */}
                    {task.description || `Untitled Task ${index + 1}`} {/* Placeholder */}
                  </p>
                  <p className="text-xs text-gray-500 dark:text-gray-400">
                    {/* Assuming formatCurrency exists, otherwise use basic formatting */}
                    {formatCurrency(task.price || 0)}
                  </p>
                </div>

                {/* Action Buttons */}
                <div className="flex items-center space-x-1">
                  {/* TODO: Add Move Up/Down Buttons later if needed */}
                  <Button
                    isIconOnly
                    size="sm" 
                    variant="light" 
                    onPress={() => onSelectTask(index)}
                    aria-label={t('common.edit')} // Add translation key
                  >
                    <Edit size={16} />
                  </Button>
                  <Button
                    isIconOnly
                    size="sm" 
                    variant="light" 
                    color="danger" 
                    onPress={() => onDeleteTask(index)}
                    aria-label={t('common.delete')} // Add translation key
                  >
                    <Trash size={16} />
                  </Button>
                </div>
              </div>
            </ListboxItem>
          ))}
        </Listbox>
      )}

      {/* Add Task Button */}
      <Button
        fullWidth
        variant="ghost"
        color="primary"
        startContent={<PlusCircle size={18} />}
        onPress={onAddTask}
        className="mt-4 h-12 text-base"
      >
        {t('quotes.addTaskButton')} {/* Add this translation key */}
      </Button>
    </div>
  );
};
